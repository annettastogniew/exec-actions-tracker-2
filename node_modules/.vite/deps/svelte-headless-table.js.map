{
  "version": 3,
  "sources": ["../../svelte-subscribe/dist/derivedKeys.js", "../../svelte-subscribe/dist/Subscribe.svelte", "../../svelte-render/dist/PropsRenderer.svelte", "../../svelte-render/dist/store.js", "../../svelte-render/dist/ComponentRenderer.svelte", "../../svelte-render/dist/Render.svelte", "../../svelte-render/dist/createRender.js", "../../svelte-headless-table/dist/columns.js", "../../svelte-headless-table/dist/utils/counter.js", "../../svelte-headless-table/dist/utils/array.js", "../../svelte-headless-table/dist/utils/css.js", "../../svelte-headless-table/dist/utils/attributes.js", "../../svelte-headless-table/dist/tableComponent.js", "../../svelte-headless-table/dist/bodyCells.js", "../../svelte-headless-table/dist/utils/filter.js", "../../svelte-headless-table/dist/bodyRows.js", "../../svelte-headless-table/dist/constants.js", "../../svelte-headless-table/dist/headerCells.js", "../../svelte-headless-table/dist/utils/math.js", "../../svelte-headless-table/dist/utils/matrix.js", "../../svelte-headless-table/dist/headerRows.js", "../../svelte-headless-table/dist/createViewModel.js", "../../svelte-headless-table/dist/createTable.js"],
  "sourcesContent": ["import { derived } from 'svelte/store';\nexport const derivedKeys = (storeMap) => {\n    // Freeze the order of entries.\n    const entries = Object.entries(storeMap);\n    const keys = entries.map(([key]) => key);\n    return derived(entries.map(([, store]) => store), ($stores) => {\n        return Object.fromEntries($stores.map((store, idx) => [keys[idx], store]));\n    });\n};\n", null, null, "import { readable } from 'svelte/store';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isReadable = (value) => {\n    return value?.subscribe instanceof Function;\n};\nexport const Undefined = readable(undefined);\n", null, null, "export class ComponentRenderConfig {\n    component;\n    props;\n    constructor(component, props) {\n        this.component = component;\n        this.props = props;\n    }\n    eventHandlers = [];\n    on(type, handler) {\n        this.eventHandlers.push([type, handler]);\n        return this;\n    }\n    children = [];\n    slot(...children) {\n        this.children = children;\n        return this;\n    }\n}\nexport function createRender(component, props) {\n    return new ComponentRenderConfig(component, props);\n}\n", "export class Column {\n    header;\n    footer;\n    height;\n    plugins;\n    constructor({ header, footer, height, plugins }) {\n        this.header = header;\n        this.footer = footer;\n        this.height = height;\n        this.plugins = plugins;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isFlat() {\n        return '__flat' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isDisplay() {\n        return '__display' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isGroup() {\n        return '__group' in this;\n    }\n}\nexport class FlatColumn extends Column {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __flat = true;\n    id;\n    constructor({ header, footer, plugins, id }) {\n        super({ header, footer, plugins, height: 1 });\n        this.id = id ?? String(header);\n    }\n}\nexport class DataColumn extends FlatColumn {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    cell;\n    accessorKey;\n    accessorFn;\n    constructor({ header, footer, plugins, cell, accessor, id, }) {\n        super({ header, footer, plugins, id: 'Initialization not complete' });\n        this.cell = cell;\n        if (accessor instanceof Function) {\n            this.accessorFn = accessor;\n        }\n        else {\n            this.accessorKey = accessor;\n        }\n        if (id === undefined && this.accessorKey === undefined && header === undefined) {\n            throw new Error('A column id, string accessor, or header is required');\n        }\n        const accessorKeyId = typeof this.accessorKey === 'string' ? this.accessorKey : null;\n        this.id = (id ?? accessorKeyId ?? String(header));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getValue(item) {\n        if (this.accessorFn !== undefined) {\n            return this.accessorFn(item);\n        }\n        if (this.accessorKey !== undefined) {\n            return item[this.accessorKey];\n        }\n        return undefined;\n    }\n}\nexport class DisplayColumn extends FlatColumn {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    cell;\n    data;\n    constructor({ header, footer, plugins, id, cell, data }) {\n        super({ header, footer, plugins, id });\n        this.cell = cell;\n        this.data = data;\n    }\n}\nexport class GroupColumn extends Column {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __group = true;\n    columns;\n    ids;\n    constructor({ header, footer, columns, plugins }) {\n        const height = Math.max(...columns.map((c) => c.height)) + 1;\n        super({ header, footer, height, plugins });\n        this.columns = columns;\n        this.ids = getFlatColumnIds(columns);\n    }\n}\nexport const getFlatColumnIds = (columns) => columns.flatMap((c) => (c.isFlat() ? [c.id] : c.isGroup() ? c.ids : []));\nexport const getFlatColumns = (columns) => {\n    return columns.flatMap((c) => (c.isFlat() ? [c] : c.isGroup() ? getFlatColumns(c.columns) : []));\n};\n", "export const getCounter = (items) => {\n    const result = new Map();\n    items.forEach((item) => {\n        result.set(item, (result.get(item) ?? 0) + 1);\n    });\n    return result;\n};\n", "import { getCounter } from './counter.js';\nexport const getDistinct = (items) => {\n    return Array.from(getCounter(items).keys());\n};\nexport const getDuplicates = (items) => {\n    return Array.from(getCounter(items).entries())\n        .filter(([, count]) => count !== 1)\n        .map(([key]) => key);\n};\n", "export const stringifyCss = (style) => {\n    return Object.entries(style)\n        .map(([name, value]) => `${name}:${value}`)\n        .join(';');\n};\n", "import { stringifyCss } from './css.js';\nexport const mergeAttributes = (a, b) => {\n    if (a.style === undefined && b.style === undefined) {\n        return { ...a, ...b };\n    }\n    return {\n        ...a,\n        ...b,\n        style: {\n            ...(typeof a.style === 'object' ? a.style : {}),\n            ...(typeof b.style === 'object' ? b.style : {}),\n        },\n    };\n};\nexport const finalizeAttributes = (attrs) => {\n    if (attrs.style === undefined || typeof attrs.style !== 'object') {\n        return attrs;\n    }\n    return {\n        ...attrs,\n        style: stringifyCss(attrs.style),\n    };\n};\n", "import { derived } from 'svelte/store';\nimport { derivedKeys } from 'svelte-subscribe';\nimport { finalizeAttributes, mergeAttributes } from './utils/attributes.js';\nexport class TableComponent {\n    id;\n    constructor({ id }) {\n        this.id = id;\n    }\n    attrsForName = {};\n    attrs() {\n        return derived(Object.values(this.attrsForName), ($attrsArray) => {\n            let $mergedAttrs = {};\n            $attrsArray.forEach(($attrs) => {\n                $mergedAttrs = mergeAttributes($mergedAttrs, $attrs);\n            });\n            return finalizeAttributes($mergedAttrs);\n        });\n    }\n    propsForName = {};\n    props() {\n        return derivedKeys(this.propsForName);\n    }\n    state;\n    injectState(state) {\n        this.state = state;\n    }\n    applyHook(pluginName, hook) {\n        if (hook.props !== undefined) {\n            this.propsForName[pluginName] = hook.props;\n        }\n        if (hook.attrs !== undefined) {\n            this.attrsForName[pluginName] = hook.attrs;\n        }\n    }\n}\n", "import { derived } from 'svelte/store';\nimport { TableComponent } from './tableComponent.js';\nexport class BodyCell extends TableComponent {\n    row;\n    constructor({ id, row }) {\n        super({ id });\n        this.row = row;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'cell'\n            };\n        });\n    }\n    rowColId() {\n        return `${this.row.id}:${this.column.id}`;\n    }\n    dataRowColId() {\n        if (!this.row.isData()) {\n            return undefined;\n        }\n        return `${this.row.dataId}:${this.column.id}`;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isDisplay() {\n        return '__display' in this;\n    }\n}\nexport class DataBodyCell extends BodyCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    column;\n    label;\n    value;\n    constructor({ row, column, label, value }) {\n        super({ id: column.id, row });\n        this.column = column;\n        this.label = label;\n        this.value = value;\n    }\n    render() {\n        if (this.label === undefined) {\n            return `${this.value}`;\n        }\n        if (this.state === undefined) {\n            throw new Error('Missing `state` reference');\n        }\n        return this.label(this, this.state);\n    }\n    clone() {\n        const clonedCell = new DataBodyCell({\n            row: this.row,\n            column: this.column,\n            label: this.label,\n            value: this.value\n        });\n        return clonedCell;\n    }\n}\nexport class DisplayBodyCell extends BodyCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    column;\n    label;\n    constructor({ row, column, label }) {\n        super({ id: column.id, row });\n        this.column = column;\n        this.label = label;\n    }\n    render() {\n        if (this.state === undefined) {\n            throw new Error('Missing `state` reference');\n        }\n        return this.label(this, this.state);\n    }\n    clone() {\n        const clonedCell = new DisplayBodyCell({\n            row: this.row,\n            column: this.column,\n            label: this.label\n        });\n        return clonedCell;\n    }\n}\n", "export const nonNull = (value) => value !== null;\nexport const nonUndefined = (value) => value !== undefined;\nexport const nonNullish = (value) => value != null;\nexport const isNumber = (value) => typeof value === 'number';\n", "import { derived } from 'svelte/store';\nimport { BodyCell, DataBodyCell, DisplayBodyCell } from './bodyCells.js';\nimport { TableComponent } from './tableComponent.js';\nimport { nonUndefined } from './utils/filter.js';\nexport class BodyRow extends TableComponent {\n    cells;\n    /**\n     * Get the cell with a given column id.\n     *\n     * **This includes hidden cells.**\n     */\n    cellForId;\n    depth;\n    parentRow;\n    subRows;\n    constructor({ id, cells, cellForId, depth = 0, parentRow }) {\n        super({ id });\n        this.cells = cells;\n        this.cellForId = cellForId;\n        this.depth = depth;\n        this.parentRow = parentRow;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'row',\n            };\n        });\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isDisplay() {\n        return '__display' in this;\n    }\n}\nexport class DataBodyRow extends BodyRow {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    dataId;\n    original;\n    constructor({ id, dataId, original, cells, cellForId, depth = 0, parentRow, }) {\n        super({ id, cells, cellForId, depth, parentRow });\n        this.dataId = dataId;\n        this.original = original;\n    }\n    clone({ includeCells = false, includeSubRows = false } = {}) {\n        const clonedRow = new DataBodyRow({\n            id: this.id,\n            dataId: this.dataId,\n            cellForId: this.cellForId,\n            cells: this.cells,\n            original: this.original,\n            depth: this.depth,\n        });\n        if (includeCells) {\n            const clonedCellsForId = Object.fromEntries(Object.entries(clonedRow.cellForId).map(([id, cell]) => {\n                const clonedCell = cell.clone();\n                clonedCell.row = clonedRow;\n                return [id, clonedCell];\n            }));\n            const clonedCells = clonedRow.cells.map(({ id }) => clonedCellsForId[id]);\n            clonedRow.cellForId = clonedCellsForId;\n            clonedRow.cells = clonedCells;\n        }\n        if (includeSubRows) {\n            const clonedSubRows = this.subRows?.map((row) => row.clone({ includeCells, includeSubRows }));\n            clonedRow.subRows = clonedSubRows;\n        }\n        else {\n            clonedRow.subRows = this.subRows;\n        }\n        return clonedRow;\n    }\n}\nexport class DisplayBodyRow extends BodyRow {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    constructor({ id, cells, cellForId, depth = 0, parentRow }) {\n        super({ id, cells, cellForId, depth, parentRow });\n    }\n    clone({ includeCells = false, includeSubRows = false } = {}) {\n        const clonedRow = new DisplayBodyRow({\n            id: this.id,\n            cellForId: this.cellForId,\n            cells: this.cells,\n            depth: this.depth,\n        });\n        clonedRow.subRows = this.subRows;\n        if (includeCells) {\n            const clonedCellsForId = Object.fromEntries(Object.entries(clonedRow.cellForId).map(([id, cell]) => {\n                const clonedCell = cell.clone();\n                clonedCell.row = clonedRow;\n                return [id, clonedCell];\n            }));\n            const clonedCells = clonedRow.cells.map(({ id }) => clonedCellsForId[id]);\n            clonedRow.cellForId = clonedCellsForId;\n            clonedRow.cells = clonedCells;\n        }\n        if (includeSubRows) {\n            const clonedSubRows = this.subRows?.map((row) => row.clone({ includeCells, includeSubRows }));\n            clonedRow.subRows = clonedSubRows;\n        }\n        else {\n            clonedRow.subRows = this.subRows;\n        }\n        return clonedRow;\n    }\n}\n/**\n * Converts an array of items into an array of table `BodyRow`s based on the column structure.\n * @param data The data to display.\n * @param flatColumns The column structure.\n * @returns An array of `BodyRow`s representing the table structure.\n */\nexport const getBodyRows = (data, \n/**\n * Flat columns before column transformations.\n */\nflatColumns, { rowDataId } = {}) => {\n    const rows = data.map((item, idx) => {\n        const id = idx.toString();\n        return new DataBodyRow({\n            id,\n            dataId: rowDataId !== undefined ? rowDataId(item, idx) : id,\n            original: item,\n            cells: [],\n            cellForId: {},\n        });\n    });\n    data.forEach((item, rowIdx) => {\n        const cells = flatColumns.map((col) => {\n            if (col.isData()) {\n                const dataCol = col;\n                const value = dataCol.getValue(item);\n                return new DataBodyCell({\n                    row: rows[rowIdx],\n                    column: dataCol,\n                    label: col.cell,\n                    value,\n                });\n            }\n            if (col.isDisplay()) {\n                const displayCol = col;\n                return new DisplayBodyCell({\n                    row: rows[rowIdx],\n                    column: displayCol,\n                    label: col.cell,\n                });\n            }\n            throw new Error('Unrecognized `FlatColumn` implementation');\n        });\n        rows[rowIdx].cells = cells;\n        flatColumns.forEach((c, colIdx) => {\n            rows[rowIdx].cellForId[c.id] = cells[colIdx];\n        });\n    });\n    return rows;\n};\n/**\n * Arranges and hides columns in an array of `BodyRow`s based on\n * `columnIdOrder` by transforming the `cells` property of each row.\n *\n * `cellForId` should remain unaffected.\n *\n * @param rows The rows to transform.\n * @param columnIdOrder The column order to transform to.\n * @returns A new array of `BodyRow`s with corrected row references.\n */\nexport const getColumnedBodyRows = (rows, columnIdOrder) => {\n    const columnedRows = rows.map((row) => {\n        const clonedRow = row.clone();\n        clonedRow.cells = [];\n        clonedRow.cellForId = {};\n        return clonedRow;\n    });\n    if (rows.length === 0 || columnIdOrder.length === 0)\n        return rows;\n    rows.forEach((row, rowIdx) => {\n        // Create a shallow copy of `row.cells` to reassign each `cell`'s `row`\n        // reference.\n        const cells = row.cells.map((cell) => {\n            const clonedCell = cell.clone();\n            clonedCell.row = columnedRows[rowIdx];\n            return clonedCell;\n        });\n        const visibleCells = columnIdOrder\n            .map((cid) => {\n            return cells.find((c) => c.id === cid);\n        })\n            .filter(nonUndefined);\n        columnedRows[rowIdx].cells = visibleCells;\n        // Include hidden cells in `cellForId` to allow row transformations on\n        // hidden cells.\n        cells.forEach((cell) => {\n            columnedRows[rowIdx].cellForId[cell.id] = cell;\n        });\n    });\n    return columnedRows;\n};\n/**\n * Converts an array of items into an array of table `BodyRow`s based on a parent row.\n * @param subItems The sub data to display.\n * @param parentRow The parent row.\n * @returns An array of `BodyRow`s representing the child rows of `parentRow`.\n */\nexport const getSubRows = (subItems, parentRow, { rowDataId } = {}) => {\n    const subRows = subItems.map((item, idx) => {\n        const id = `${parentRow.id}>${idx}`;\n        return new DataBodyRow({\n            id,\n            dataId: rowDataId !== undefined ? rowDataId(item, idx) : id,\n            original: item,\n            cells: [],\n            cellForId: {},\n            depth: parentRow.depth + 1,\n            parentRow,\n        });\n    });\n    subItems.forEach((item, rowIdx) => {\n        // parentRow.cells only include visible cells.\n        // We have to derive all cells from parentRow.cellForId\n        const cellForId = Object.fromEntries(Object.values(parentRow.cellForId).map((cell) => {\n            const { column } = cell;\n            if (column.isData()) {\n                const dataCol = column;\n                const value = dataCol.getValue(item);\n                return [\n                    column.id,\n                    new DataBodyCell({ row: subRows[rowIdx], column, label: column.cell, value }),\n                ];\n            }\n            if (column.isDisplay()) {\n                return [\n                    column.id,\n                    new DisplayBodyCell({ row: subRows[rowIdx], column, label: column.cell }),\n                ];\n            }\n            throw new Error('Unrecognized `FlatColumn` implementation');\n        }));\n        subRows[rowIdx].cellForId = cellForId;\n        const cells = parentRow.cells.map((cell) => {\n            return cellForId[cell.id];\n        });\n        subRows[rowIdx].cells = cells;\n    });\n    return subRows;\n};\n", "export const NBSP = ' ';\n", "import { derived } from 'svelte/store';\nimport { NBSP } from './constants.js';\nimport { TableComponent } from './tableComponent.js';\nexport class HeaderCell extends TableComponent {\n    label;\n    colspan;\n    colstart;\n    constructor({ id, label, colspan, colstart }) {\n        super({ id });\n        this.label = label;\n        this.colspan = colspan;\n        this.colstart = colstart;\n    }\n    render() {\n        if (this.label instanceof Function) {\n            if (this.state === undefined) {\n                throw new Error('Missing `state` reference');\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return this.label(this, this.state);\n        }\n        return this.label;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'columnheader',\n                colspan: this.colspan\n            };\n        });\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isFlat() {\n        return '__flat' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isFlatDisplay() {\n        return '__flat' in this && '__display' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isGroup() {\n        return '__group' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isGroupDisplay() {\n        return '__group' in this && '__display' in this;\n    }\n}\nexport class FlatHeaderCell extends HeaderCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __flat = true;\n    constructor({ id, label, colstart }) {\n        super({ id, label, colspan: 1, colstart });\n    }\n    clone() {\n        return new FlatHeaderCell({\n            id: this.id,\n            label: this.label,\n            colstart: this.colstart\n        });\n    }\n}\nexport class DataHeaderCell extends FlatHeaderCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    accessorKey;\n    accessorFn;\n    constructor({ id, label, accessorKey, accessorFn, colstart }) {\n        super({ id, label, colstart });\n        this.accessorKey = accessorKey;\n        this.accessorFn = accessorFn;\n    }\n    clone() {\n        return new DataHeaderCell({\n            id: this.id,\n            label: this.label,\n            accessorFn: this.accessorFn,\n            accessorKey: this.accessorKey,\n            colstart: this.colstart\n        });\n    }\n}\nexport class FlatDisplayHeaderCell extends FlatHeaderCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    constructor({ id, label = NBSP, colstart }) {\n        super({ id, label, colstart });\n    }\n    clone() {\n        return new FlatDisplayHeaderCell({\n            id: this.id,\n            label: this.label,\n            colstart: this.colstart\n        });\n    }\n}\nexport class GroupHeaderCell extends HeaderCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __group = true;\n    ids;\n    allId;\n    allIds;\n    constructor({ label, ids, allIds, colspan, colstart }) {\n        super({ id: `[${ids.join(',')}]`, label, colspan, colstart });\n        this.ids = ids;\n        this.allId = `[${allIds.join(',')}]`;\n        this.allIds = allIds;\n    }\n    setIds(ids) {\n        this.ids = ids;\n        this.id = `[${this.ids.join(',')}]`;\n    }\n    pushId(id) {\n        this.ids = [...this.ids, id];\n        this.id = `[${this.ids.join(',')}]`;\n    }\n    clone() {\n        return new GroupHeaderCell({\n            label: this.label,\n            ids: this.ids,\n            allIds: this.allIds,\n            colspan: this.colspan,\n            colstart: this.colstart\n        });\n    }\n}\nexport class GroupDisplayHeaderCell extends GroupHeaderCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    constructor({ label = NBSP, ids, allIds, colspan = 1, colstart }) {\n        super({ label, ids, allIds, colspan, colstart });\n    }\n    clone() {\n        return new GroupDisplayHeaderCell({\n            label: this.label,\n            ids: this.ids,\n            allIds: this.allIds,\n            colspan: this.colspan,\n            colstart: this.colstart\n        });\n    }\n}\n", "export const sum = (nums) => nums.reduce((a, b) => a + b, 0);\nexport const mean = (nums) => (nums.length === 0 ? 0 : sum(nums) / nums.length);\n", "export const getNullMatrix = (width, height) => {\n    const result = [];\n    // Use a loop to create a new array instance per row.\n    for (let i = 0; i < height; i++) {\n        result.push(Array(width).fill(null));\n    }\n    return result;\n};\nexport const getTransposed = (matrix) => {\n    const height = matrix.length;\n    if (height === 0) {\n        return matrix;\n    }\n    const width = matrix[0].length;\n    const result = getNullMatrix(height, width);\n    for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n            result[i][j] = matrix[j][i];\n        }\n    }\n    // We guarantee that all elements are filled.\n    return result;\n};\n", "import { derived } from 'svelte/store';\nimport { DataHeaderCell, FlatDisplayHeaderCell, GroupDisplayHeaderCell, GroupHeaderCell, } from './headerCells.js';\nimport { TableComponent } from './tableComponent.js';\nimport { sum } from './utils/math.js';\nimport { getNullMatrix, getTransposed } from './utils/matrix.js';\nexport class HeaderRow extends TableComponent {\n    cells;\n    constructor({ id, cells }) {\n        super({ id });\n        this.cells = cells;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'row',\n            };\n        });\n    }\n    clone() {\n        return new HeaderRow({\n            id: this.id,\n            cells: this.cells,\n        });\n    }\n}\nexport const getHeaderRows = (columns, flatColumnIds = []) => {\n    const rowMatrix = getHeaderRowMatrix(columns);\n    // Perform all column operations on the transposed columnMatrix. This helps\n    // to reduce the number of expensive transpose operations required.\n    let columnMatrix = getTransposed(rowMatrix);\n    columnMatrix = getOrderedColumnMatrix(columnMatrix, flatColumnIds);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    populateGroupHeaderCellIds(columnMatrix);\n    return headerRowsForRowMatrix(getTransposed(columnMatrix));\n};\nexport const getHeaderRowMatrix = (columns) => {\n    const maxColspan = sum(columns.map((c) => (c.isGroup() ? c.ids.length : 1)));\n    const maxHeight = Math.max(...columns.map((c) => c.height));\n    const rowMatrix = getNullMatrix(maxColspan, maxHeight);\n    let cellOffset = 0;\n    columns.forEach((c) => {\n        const heightOffset = maxHeight - c.height;\n        loadHeaderRowMatrix(rowMatrix, c, heightOffset, cellOffset);\n        cellOffset += c.isGroup() ? c.ids.length : 1;\n    });\n    // Replace null cells with blank display cells.\n    return rowMatrix.map((cells, rowIdx) => cells.map((cell, columnIdx) => {\n        if (cell !== null)\n            return cell;\n        if (rowIdx === maxHeight - 1)\n            return new FlatDisplayHeaderCell({ id: columnIdx.toString(), colstart: columnIdx });\n        const flatId = rowMatrix[maxHeight - 1][columnIdx]?.id ?? columnIdx.toString();\n        return new GroupDisplayHeaderCell({ ids: [], allIds: [flatId], colstart: columnIdx });\n    }));\n};\nconst loadHeaderRowMatrix = (rowMatrix, column, rowOffset, cellOffset) => {\n    if (column.isData()) {\n        // `DataHeaderCell` should always be in the last row.\n        rowMatrix[rowMatrix.length - 1][cellOffset] = new DataHeaderCell({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            label: column.header,\n            accessorFn: column.accessorFn,\n            accessorKey: column.accessorKey,\n            id: column.id,\n            colstart: cellOffset,\n        });\n        return;\n    }\n    if (column.isDisplay()) {\n        rowMatrix[rowMatrix.length - 1][cellOffset] = new FlatDisplayHeaderCell({\n            id: column.id,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            label: column.header,\n            colstart: cellOffset,\n        });\n        return;\n    }\n    if (column.isGroup()) {\n        // Fill multi-colspan cells.\n        for (let i = 0; i < column.ids.length; i++) {\n            rowMatrix[rowOffset][cellOffset + i] = new GroupHeaderCell({\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                label: column.header,\n                colspan: 1,\n                allIds: column.ids,\n                ids: [],\n                colstart: cellOffset,\n            });\n        }\n        let childCellOffset = 0;\n        column.columns.forEach((c) => {\n            loadHeaderRowMatrix(rowMatrix, c, rowOffset + 1, cellOffset + childCellOffset);\n            childCellOffset += c.isGroup() ? c.ids.length : 1;\n        });\n        return;\n    }\n};\nexport const getOrderedColumnMatrix = (columnMatrix, flatColumnIds) => {\n    if (flatColumnIds.length === 0) {\n        return columnMatrix;\n    }\n    const orderedColumnMatrix = [];\n    // Each row of the transposed matrix represents a column.\n    // The `FlatHeaderCell` should be the last cell of each column.\n    flatColumnIds.forEach((key, columnIdx) => {\n        const nextColumn = columnMatrix.find((columnCells) => {\n            const flatCell = columnCells[columnCells.length - 1];\n            if (!flatCell.isFlat()) {\n                throw new Error('The last element of each column must be a `FlatHeaderCell`');\n            }\n            return flatCell.id === key;\n        });\n        if (nextColumn !== undefined) {\n            orderedColumnMatrix.push(nextColumn.map((column) => {\n                const clonedColumn = column.clone();\n                clonedColumn.colstart = columnIdx;\n                return clonedColumn;\n            }));\n        }\n    });\n    return orderedColumnMatrix;\n};\nconst populateGroupHeaderCellIds = (columnMatrix) => {\n    columnMatrix.forEach((columnCells) => {\n        const lastCell = columnCells[columnCells.length - 1];\n        if (!lastCell.isFlat()) {\n            throw new Error('The last element of each column must be a `FlatHeaderCell`');\n        }\n        columnCells.forEach((c) => {\n            if (c.isGroup()) {\n                c.pushId(lastCell.id);\n            }\n        });\n    });\n};\nexport const headerRowsForRowMatrix = (rowMatrix) => {\n    return rowMatrix.map((rowCells, rowIdx) => {\n        return new HeaderRow({ id: rowIdx.toString(), cells: getMergedRow(rowCells) });\n    });\n};\n/**\n * Multi-colspan cells will appear as multiple adjacent cells on the same row.\n * Join these adjacent multi-colspan cells and update the colspan property.\n *\n * Non-adjacent multi-colspan cells (due to column ordering) must be cloned\n * from the original .\n *\n * @param cells An array of cells.\n * @returns An array of cells with no duplicate consecutive cells.\n */\nexport const getMergedRow = (cells) => {\n    if (cells.length === 0) {\n        return cells;\n    }\n    const mergedCells = [];\n    let startIdx = 0;\n    let endIdx = 1;\n    while (startIdx < cells.length) {\n        const cell = cells[startIdx].clone();\n        if (!cell.isGroup()) {\n            mergedCells.push(cell);\n            startIdx++;\n            continue;\n        }\n        endIdx = startIdx + 1;\n        const ids = [...cell.ids];\n        while (endIdx < cells.length) {\n            const nextCell = cells[endIdx];\n            if (!nextCell.isGroup()) {\n                break;\n            }\n            if (cell.allId !== nextCell.allId) {\n                break;\n            }\n            ids.push(...nextCell.ids);\n            endIdx++;\n        }\n        cell.setIds(ids);\n        cell.colspan = endIdx - startIdx;\n        mergedCells.push(cell);\n        startIdx = endIdx;\n    }\n    return mergedCells;\n};\n", "import { derived, readable, writable } from 'svelte/store';\nimport { BodyRow, getBodyRows, getColumnedBodyRows } from './bodyRows.js';\nimport { FlatColumn, getFlatColumns } from './columns.js';\nimport { getHeaderRows, HeaderRow } from './headerRows.js';\nimport { finalizeAttributes } from './utils/attributes.js';\nimport { nonUndefined } from './utils/filter.js';\nexport const createViewModel = (table, columns, { rowDataId } = {}) => {\n    const { data, plugins } = table;\n    const $flatColumns = getFlatColumns(columns);\n    const flatColumns = readable($flatColumns);\n    const originalRows = derived([data, flatColumns], ([$data, $flatColumns]) => {\n        return getBodyRows($data, $flatColumns, { rowDataId });\n    });\n    // _stores need to be defined first to pass into plugins for initialization.\n    const _visibleColumns = writable([]);\n    const _headerRows = writable();\n    const _rows = writable([]);\n    const _pageRows = writable([]);\n    const _tableAttrs = writable({\n        role: 'table',\n    });\n    const _tableHeadAttrs = writable({});\n    const _tableBodyAttrs = writable({\n        role: 'rowgroup',\n    });\n    const pluginInitTableState = {\n        data,\n        columns,\n        flatColumns: $flatColumns,\n        tableAttrs: _tableAttrs,\n        tableHeadAttrs: _tableHeadAttrs,\n        tableBodyAttrs: _tableBodyAttrs,\n        visibleColumns: _visibleColumns,\n        headerRows: _headerRows,\n        originalRows,\n        rows: _rows,\n        pageRows: _pageRows,\n    };\n    const pluginInstances = Object.fromEntries(Object.entries(plugins).map(([pluginName, plugin]) => {\n        const columnOptions = Object.fromEntries($flatColumns\n            .map((c) => {\n            const option = c.plugins?.[pluginName];\n            if (option === undefined)\n                return undefined;\n            return [c.id, option];\n        })\n            .filter(nonUndefined));\n        return [\n            pluginName,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            plugin({ pluginName, tableState: pluginInitTableState, columnOptions }),\n        ];\n    }));\n    const pluginStates = Object.fromEntries(Object.entries(pluginInstances).map(([key, pluginInstance]) => [\n        key,\n        pluginInstance.pluginState,\n    ]));\n    const tableState = {\n        data,\n        columns,\n        flatColumns: $flatColumns,\n        tableAttrs: _tableAttrs,\n        tableHeadAttrs: _tableHeadAttrs,\n        tableBodyAttrs: _tableBodyAttrs,\n        visibleColumns: _visibleColumns,\n        headerRows: _headerRows,\n        originalRows,\n        rows: _rows,\n        pageRows: _pageRows,\n        pluginStates,\n    };\n    const deriveTableAttrsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.deriveTableAttrs)\n        .filter(nonUndefined);\n    let tableAttrs = readable({\n        role: 'table',\n    });\n    deriveTableAttrsFns.forEach((fn) => {\n        tableAttrs = fn(tableAttrs);\n    });\n    const finalizedTableAttrs = derived(tableAttrs, ($tableAttrs) => {\n        const $finalizedAttrs = finalizeAttributes($tableAttrs);\n        _tableAttrs.set($finalizedAttrs);\n        return $finalizedAttrs;\n    });\n    const deriveTableHeadAttrsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.deriveTableBodyAttrs)\n        .filter(nonUndefined);\n    let tableHeadAttrs = readable({});\n    deriveTableHeadAttrsFns.forEach((fn) => {\n        tableHeadAttrs = fn(tableHeadAttrs);\n    });\n    const finalizedTableHeadAttrs = derived(tableHeadAttrs, ($tableHeadAttrs) => {\n        const $finalizedAttrs = finalizeAttributes($tableHeadAttrs);\n        _tableHeadAttrs.set($finalizedAttrs);\n        return $finalizedAttrs;\n    });\n    const deriveTableBodyAttrsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.deriveTableBodyAttrs)\n        .filter(nonUndefined);\n    let tableBodyAttrs = readable({\n        role: 'rowgroup',\n    });\n    deriveTableBodyAttrsFns.forEach((fn) => {\n        tableBodyAttrs = fn(tableBodyAttrs);\n    });\n    const finalizedTableBodyAttrs = derived(tableBodyAttrs, ($tableBodyAttrs) => {\n        const $finalizedAttrs = finalizeAttributes($tableBodyAttrs);\n        _tableBodyAttrs.set($finalizedAttrs);\n        return $finalizedAttrs;\n    });\n    const deriveFlatColumnsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.deriveFlatColumns)\n        .filter(nonUndefined);\n    let visibleColumns = flatColumns;\n    deriveFlatColumnsFns.forEach((fn) => {\n        // Variance of generic type here is unstable. Not sure how to fix.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        visibleColumns = fn(visibleColumns);\n    });\n    const injectedColumns = derived(visibleColumns, ($visibleColumns) => {\n        _visibleColumns.set($visibleColumns);\n        return $visibleColumns;\n    });\n    const columnedRows = derived([originalRows, injectedColumns], ([$originalRows, $injectedColumns]) => {\n        return getColumnedBodyRows($originalRows, $injectedColumns.map((c) => c.id));\n    });\n    const deriveRowsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.deriveRows)\n        .filter(nonUndefined);\n    let rows = columnedRows;\n    deriveRowsFns.forEach((fn) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        rows = fn(rows);\n    });\n    const injectedRows = derived(rows, ($rows) => {\n        // Inject state.\n        $rows.forEach((row) => {\n            row.injectState(tableState);\n            row.cells.forEach((cell) => {\n                cell.injectState(tableState);\n            });\n        });\n        // Apply plugin component hooks.\n        Object.entries(pluginInstances).forEach(([pluginName, pluginInstance]) => {\n            $rows.forEach((row) => {\n                if (pluginInstance.hooks?.['tbody.tr'] !== undefined) {\n                    row.applyHook(pluginName, pluginInstance.hooks['tbody.tr'](row));\n                }\n                row.cells.forEach((cell) => {\n                    if (pluginInstance.hooks?.['tbody.tr.td'] !== undefined) {\n                        cell.applyHook(pluginName, pluginInstance.hooks['tbody.tr.td'](cell));\n                    }\n                });\n            });\n        });\n        _rows.set($rows);\n        return $rows;\n    });\n    const derivePageRowsFns = Object.values(pluginInstances)\n        .map((pluginInstance) => pluginInstance.derivePageRows)\n        .filter(nonUndefined);\n    // Must derive from `injectedRows` instead of `rows` to ensure that `_rows` is set.\n    let pageRows = injectedRows;\n    derivePageRowsFns.forEach((fn) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        pageRows = fn(pageRows);\n    });\n    const injectedPageRows = derived(pageRows, ($pageRows) => {\n        // Inject state.\n        $pageRows.forEach((row) => {\n            row.injectState(tableState);\n            row.cells.forEach((cell) => {\n                cell.injectState(tableState);\n            });\n        });\n        // Apply plugin component hooks.\n        Object.entries(pluginInstances).forEach(([pluginName, pluginInstance]) => {\n            $pageRows.forEach((row) => {\n                if (pluginInstance.hooks?.['tbody.tr'] !== undefined) {\n                    row.applyHook(pluginName, pluginInstance.hooks['tbody.tr'](row));\n                }\n                row.cells.forEach((cell) => {\n                    if (pluginInstance.hooks?.['tbody.tr.td'] !== undefined) {\n                        cell.applyHook(pluginName, pluginInstance.hooks['tbody.tr.td'](cell));\n                    }\n                });\n            });\n        });\n        _pageRows.set($pageRows);\n        return $pageRows;\n    });\n    const headerRows = derived(injectedColumns, ($injectedColumns) => {\n        const $headerRows = getHeaderRows(columns, $injectedColumns.map((c) => c.id));\n        // Inject state.\n        $headerRows.forEach((row) => {\n            row.injectState(tableState);\n            row.cells.forEach((cell) => {\n                cell.injectState(tableState);\n            });\n        });\n        // Apply plugin component hooks.\n        Object.entries(pluginInstances).forEach(([pluginName, pluginInstance]) => {\n            $headerRows.forEach((row) => {\n                if (pluginInstance.hooks?.['thead.tr'] !== undefined) {\n                    row.applyHook(pluginName, pluginInstance.hooks['thead.tr'](row));\n                }\n                row.cells.forEach((cell) => {\n                    if (pluginInstance.hooks?.['thead.tr.th'] !== undefined) {\n                        cell.applyHook(pluginName, pluginInstance.hooks['thead.tr.th'](cell));\n                    }\n                });\n            });\n        });\n        _headerRows.set($headerRows);\n        return $headerRows;\n    });\n    return {\n        tableAttrs: finalizedTableAttrs,\n        tableHeadAttrs: finalizedTableHeadAttrs,\n        tableBodyAttrs: finalizedTableBodyAttrs,\n        visibleColumns: injectedColumns,\n        flatColumns: $flatColumns,\n        headerRows,\n        originalRows,\n        rows: injectedRows,\n        pageRows: injectedPageRows,\n        pluginStates,\n    };\n};\n", "import { DataColumn, DisplayColumn, getFlatColumnIds, GroupColumn, } from './columns.js';\nimport { getDuplicates } from './utils/array.js';\nimport { createViewModel, } from './createViewModel.js';\nexport class Table {\n    data;\n    plugins;\n    constructor(data, plugins) {\n        this.data = data;\n        this.plugins = plugins;\n    }\n    createColumns(columns) {\n        const ids = getFlatColumnIds(columns);\n        const duplicateIds = getDuplicates(ids);\n        if (duplicateIds.length !== 0) {\n            throw new Error(`Duplicate column ids not allowed: \"${duplicateIds.join('\", \"')}\"`);\n        }\n        return columns;\n    }\n    column(def) {\n        return new DataColumn(def);\n    }\n    group(def) {\n        return new GroupColumn(def);\n    }\n    display(def) {\n        return new DisplayColumn(def);\n    }\n    createViewModel(columns, options) {\n        return createViewModel(this, columns, options);\n    }\n}\nexport const createTable = (data, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nplugins = {}) => {\n    return new Table(data, plugins);\n};\n"],
  "mappings": "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",
  "names": ["$$anchor", "component", "$flatColumns", "_a"]
}
